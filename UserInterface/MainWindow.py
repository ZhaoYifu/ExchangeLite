# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtWidgets, Qt
from PyQt5.QtGui import QStandardItemModel, QFont, QTextImageFormat
from PyQt5.QtWidgets import QMainWindow, QAbstractItemView, QMessageBox
import os
from Tools import TokenHandler
from Controls import GetEmailList
from Controls import RefreshMailList
from Controls import RefreshDirTree
from Controls import ShowWaitWindow
from Controls import GetAnEmail
from Controls import RefreshAttachmentList
from Controls import ArchiveAttachment
from Controls import BatchArchive
from Controls import ShowLogWindow
from Controls import BatchSend


######################################
# Main Window
######################################


class Ui_MainWindow(object):
    token_handler = ''  # Current token information
    model = ''  # model used by treeview
    modelmodel = ''  # model used by listview
    modelattach = ''  # model used by listview_2
    qtwiget = ''  # used by treewiew
    anemail = None  # one selected email item
    logwin = None  # Log window
    anmessage = None  # A message to send


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1671, 914)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(470, 10, 20, 871))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.treeView = QtWidgets.QTreeView(self.centralwidget)
        self.treeView.setGeometry(QtCore.QRect(10, 10, 201, 371))
        self.treeView.setObjectName("treeView")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(10, 400, 441, 461))
        self.listView.setObjectName("listView")
        self.listView_2 = QtWidgets.QListView(self.centralwidget)
        self.listView_2.setGeometry(QtCore.QRect(230, 30, 221, 241))
        self.listView_2.setObjectName("listView_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 280, 101, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(240, 310, 101, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(520, 130, 1021, 691))
        self.textEdit.setObjectName("textEdit")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(240, 360, 101, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(520, 10, 861, 41))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(520, 60, 441, 61))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(1000, 60, 471, 61))
        self.textEdit_4.setObjectName("textEdit_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(1550, 180, 111, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(1550, 220, 111, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(1550, 260, 111, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(370, 300, 75, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(370, 340, 75, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(490, 10, 54, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(490, 60, 54, 12))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(970, 60, 54, 12))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(490, 130, 54, 12))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(230, 10, 54, 12))
        self.label_5.setObjectName("label_5")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(1480, 40, 75, 51))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(1570, 10, 75, 51))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(1570, 70, 75, 51))
        self.pushButton_11.setObjectName("pushButton_11")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1671, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Do additional operations
        self.additional_operations()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "下载选中附件"))
        self.pushButton_2.setText(_translate("MainWindow", "下载所有附件"))
        self.pushButton_3.setText(_translate("MainWindow", "导出选中邮件"))
        self.pushButton_4.setText(_translate("MainWindow", "批量导出EML"))
        self.pushButton_5.setText(_translate("MainWindow", "批量下载附件"))
        self.pushButton_6.setText(_translate("MainWindow", "批量转发邮件"))
        self.pushButton_7.setText(_translate("MainWindow", "刷新目录树"))
        self.pushButton_8.setText(_translate("MainWindow", "刷新邮件单"))
        self.label.setText(_translate("MainWindow", "标题"))
        self.label_2.setText(_translate("MainWindow", "收件"))
        self.label_3.setText(_translate("MainWindow", "抄送"))
        self.label_4.setText(_translate("MainWindow", "正文"))
        self.label_5.setText(_translate("MainWindow", "附件列表"))
        self.pushButton_9.setText(_translate("MainWindow", "发送"))
        self.pushButton_10.setText(_translate("MainWindow", "转发"))
        self.pushButton_11.setText(_translate("MainWindow", "回复"))

    def additional_operations(self):
        self.token_handler = TokenHandler.TokenHandler()

        self.treeView.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        self.listView.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        self.listView_2.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        self.textEdit.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        self.textEdit.setHorizontalScrollBarPolicy(2)
        self.textEdit.setVerticalScrollBarPolicy(2)
        self.textEdit.setWordWrapMode(Qt.QTextOption.NoWrap)
        self.textEdit_2.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        self.textEdit_3.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        self.textEdit_4.setStyleSheet('''background-color:#FFFAF0;border-radius:3px;''')
        fnt = QFont("仿宋", 15)
        self.textEdit.setFont(fnt)
        fnt.setBold(True)
        self.textEdit_2.setFont(fnt)
        fnt = QFont("仿宋", 12)
        self.textEdit_3.setFont(fnt)
        self.textEdit_4.setFont(fnt)
        self.pushButton.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_2.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_3.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_4.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_5.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_6.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_7.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton_8.setStyleSheet('''background-color:red;border-radius:3px;''')
        self.pushButton.clicked.connect(self.archive_attachment)
        self.pushButton_2.clicked.connect(self.archive_all_attachment)
        self.pushButton_3.clicked.connect(self.export_an_email)
        self.pushButton_4.clicked.connect(self.batch_archive_eml)
        self.pushButton_5.clicked.connect(self.batch_archive_attachment)
        self.pushButton_6.clicked.connect(self.batch_send)
        self.pushButton_7.clicked.connect(self.refresh_dir_tree)
        self.pushButton_8.clicked.connect(self.refresh_mail_list)

        self.qtwiget = QtWidgets.QWidget()
        self.model = QStandardItemModel(0, 2, self.qtwiget)
        self.model.setHorizontalHeaderLabels(['文件夹', 'id', 'changekey', '绝对路径'])
        self.treeView.setModel(self.model)
        self.treeView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.treeView.clicked.connect(self.refresh_mail_list)
        self.treeView.setColumnWidth(0, 300)
        self.treeView.setColumnWidth(1, 1000)
        self.treeView.setColumnWidth(1, 800)
        self.treeView.setColumnWidth(1, 500)

        self.modelmodel = QStandardItemModel()
        self.listView.setModel(self.modelmodel)
        self.listView.clicked.connect(self.get_an_email)
        self.listView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.listView_2.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.listView_2.doubleClicked.connect(self.show_attachment)
        self.listView_2.setSelectionMode(2)

    def get_select_tree_node_info(self):
        path = ''
        id = ''
        key = ''
        indexs = self.treeView.selectedIndexes()
        j = 0
        for i in indexs:
            if (j == 1):
                id = str(self.treeView.model().itemData(i)[0])
            if (j == 2):
                key = str(self.treeView.model().itemData(i)[0])
            if (j == 3):
                path = str(self.treeView.model().itemData(i)[0])
            j += 1
        return [len(indexs), path, id, key]

    def get_select_list_node_info(self):
        email_id = ''
        email_key = ''
        selectednodes = self.listView.selectedIndexes()
        for i in selectednodes:
            temp = (self.modelmodel.itemFromIndex(i).text())[
                   (self.modelmodel.itemFromIndex(i).text().index('|**    ID     **| ') + 18):]
            self.modelmodel.itemFromIndex(i).setText(
                self.modelmodel.itemFromIndex(i).text().replace('|**是否已读**| False', '|**是否已读**| True'))
            self.modelmodel.itemFromIndex(i).setBackground(QtCore.Qt.white)
            email_id = temp[:temp.index('\n')]
            temp = temp[(temp.index('|**   KEY    **| ') + 17):]
            email_key = temp[:temp.index('|**是否已读**| ')]
            self.modelmodel.itemFromIndex(i).setText(
                self.modelmodel.itemFromIndex(i).text().replace('|**是否已读**| False', '|**是否已读**| True'))
            self.modelmodel.itemFromIndex(i).setBackground(QtCore.Qt.white)
            break
        return [len(selectednodes), email_id, email_key]

    def show_an_email(self, email_infos):
        index = 0
        for a in email_infos:
            if (index == 0):
                self.textEdit_2.setText(a)
            if (index == 3):
                temp = ''
                for aa in a:
                    temp += aa[1] + ';\n'
                self.textEdit_3.setText(temp)
            if (index == 4):
                temp = ''
                for aa in a:
                    temp += aa[1] + ';\n'
                self.textEdit_4.setText(temp)
            if (index == 5):
                attlist = RefreshAttachmentList.RefreshAttachmentList(self.modelattach, self.token_handler, a)
                attlist.refresh_attachment_list()
            index += 1
        ##self.textEdit.setText(self.anemail.get_content())
        self.textEdit.setText(self.anemail.rend_inlines(self.anemail.get_content()))

    def clear_dir(self, dir):
        list = os.listdir(dir)
        for l in list:
            path = os.path.join(dir, l)
            if (os.path.isdir(path)):
                self.clear_dir(path)
                os.rmdir(path)
            else:
                os.remove(path)

    def clear_interface(self):
        self.modelmodel = QStandardItemModel()
        self.listView.setModel(self.modelmodel)
        self.modelattach = QStandardItemModel()
        self.listView_2.setModel(self.modelattach)
        self.textEdit.setText('')
        self.textEdit_2.setText('')
        self.textEdit_3.setText('')
        self.textEdit_4.setText('')
        self.clear_dir('../temp')

    def refresh_dir_tree(self):
        waitwindow = ShowWaitWindow.ShowWaitWindow('正在更新目录树，请稍候...')
        waitwindow.show_wait_window()
        self.clear_interface()
        self.qtwiget = QtWidgets.QWidget()
        self.model = QStandardItemModel(0, 2, self.qtwiget)
        self.model.setHorizontalHeaderLabels(['文件夹', 'id', 'changekey', '绝对路径'])
        self.treeView.setModel(self.model)
        refreshdir = RefreshDirTree.RefreshDirTree(self.model, self.token_handler)
        refreshdir.refresh_dir_tree()
        waitwindow.close_wait_window()

    def refresh_mail_list(self):
        self.clear_interface()
        temp = self.get_select_tree_node_info()
        if (temp[0] == 0):
            QMessageBox(QMessageBox.Critical, '错误', '请先选中一个目录').exec()
            return
        path = temp[1]
        id = temp[2]
        changekey = temp[3]
        waitwindow = ShowWaitWindow.ShowWaitWindow('正在获取邮件列表，请稍候...')
        waitwindow.show_wait_window()
        getemaillist = GetEmailList.GetEmailList(path, self.token_handler)
        list = getemaillist.get_email_list()
        refreshmaillist = RefreshMailList.RefreshMailList(self.modelmodel, self.token_handler, list)
        refreshmaillist.refresh_mail_list()
        self.modelattach = QStandardItemModel()
        self.listView_2.setModel(self.modelattach)
        self.listView.clearSelection()
        self.listView_2.clearSelection()
        waitwindow.close_wait_window()

    def get_an_email(self):
        email_id = ''
        email_key = ''
        temp = self.get_select_tree_node_info()
        if (temp[0] == 0):
            QMessageBox(QMessageBox.Critical, '错误', '请先选中一个目录').exec()
            return
        folder_path = temp[1]
        folder_id = temp[2]
        folder_key = temp[3]
        temp = self.get_select_list_node_info()
        if (temp == 0):
            QMessageBox(QMessageBox.Critical, '错误', '请选中一封邮件').exec()
            return
        email_id = temp[1]
        email_key = temp[2]

        waitwindow = ShowWaitWindow.ShowWaitWindow('获取目标邮件内容中，请稍候...')
        waitwindow.show_wait_window()
        self.anemail = GetAnEmail.GetAnEmail(self.token_handler, folder_path, email_id, email_key)
        self.anemail.clear_dir('../temp')
        email_infos = self.anemail.get_an_email()
        # print(email_infos)
        self.modelattach = QStandardItemModel()
        self.listView_2.setModel(self.modelattach)
        self.show_an_email(email_infos)
        waitwindow.close_wait_window()

    def export_an_email(self):
        if (self.anemail == None):
            QMessageBox(QMessageBox.Critical, '操作错误', '请先选中一封邮件！').exec()
            return
        self.anemail.save_eml_file()

    def show_attachment(self):
        indexs = self.listView_2.selectedIndexes()
        if (indexs):
            for i in indexs:
                filename = self.modelattach.itemFromIndex(i).text()[9:]
                type = self.modelattach.itemFromIndex(i).text()[:9]
                if (type == '|*独立附件*| '):
                    arg = os.path.abspath('../temp') + '\\attachments\\' + filename
                    try:
                        os.startfile(os.path.abspath('../temp') + '\\attachments\\' + filename)
                    except Exception as e:
                        QMessageBox(QMessageBox.Critical, '错误', str(e)).exec()
                    self.listView_2.clearSelection()
                    self.listView_2.clearFocus()
                    return
                if (type == '|*内嵌附件*| '):
                    try:
                        os.startfile(os.path.abspath('../temp') + '\\inlines\\' + filename)
                    except Exception as e:
                        QMessageBox(QMessageBox.Critical, '错误', str(e)).exec()
                    self.listView_2.clearSelection()
                    self.listView_2.clearFocus()
                    return

    def archive_attachment(self):
        indexs = self.listView_2.selectedIndexes()
        if (indexs):
            arc = ArchiveAttachment.ArchiveAttachment(self.modelattach, indexs)
            arc.archive_attachment()
            self.listView_2.clearSelection()
            self.listView_2.clearFocus()
            return
        QMessageBox(QMessageBox.Critical, '操作错误', '请先点击要下载的附件！').exec()

    def archive_all_attachment(self):
        self.listView_2.selectAll()
        indexs = self.listView_2.selectedIndexes()
        if (indexs):
            waitwindow = ShowWaitWindow.ShowWaitWindow('附件下载中，请稍候...')
            waitwindow.show_wait_window()
            arc = ArchiveAttachment.ArchiveAttachment(self.modelattach, indexs)
            arc.archive_attachment()
            self.listView_2.clearSelection()
            self.listView_2.clearFocus()
            waitwindow.close_wait_window()
            return
        QMessageBox(QMessageBox.Critical, '操作错误', '不存在任何目标附件！').exec()

    def batch_archive_eml(self):
        indexs = self.treeView.selectedIndexes()
        path = ''
        j = 0
        for i in indexs:
            if (j == 1):
                id = str(self.treeView.model().itemData(i)[0])
            if (j == 2):
                changekey = str(self.treeView.model().itemData(i)[0])
            if (j == 3):
                path = str(self.treeView.model().itemData(i)[0])
            j += 1
        if (path == ''):
            QMessageBox(QMessageBox.Critical, '操作错误', '请先选择一个目录！').exec()
            return
        waitwindow = ShowWaitWindow.ShowWaitWindow('批量EML导出中，请稍候...')
        waitwindow.show_wait_window()
        batcharceml = BatchArchive.BatchArchive(path, self.token_handler)
        prompt = batcharceml.batch_archive_eml()
        waitwindow.close_wait_window()
        self.logwin = ShowLogWindow.ShowLogWindow(prompt)
        self.logwin.show_log_window()

    def batch_archive_attachment(self):
        indexs = self.treeView.selectedIndexes()
        path = ''
        j = 0
        for i in indexs:
            if (j == 1):
                id = str(self.treeView.model().itemData(i)[0])
            if (j == 2):
                changekey = str(self.treeView.model().itemData(i)[0])
            if (j == 3):
                path = str(self.treeView.model().itemData(i)[0])
            j += 1
        if (path == ''):
            QMessageBox(QMessageBox.Critical, '操作错误', '请先选择一个目录！').exec()
            return
        waitwindow = ShowWaitWindow.ShowWaitWindow('批量附件下载中，请稍候...')
        waitwindow.show_wait_window()
        batcharceml = BatchArchive.BatchArchive(path, self.token_handler)
        prompt = batcharceml.batch_archive_attachments()
        waitwindow.close_wait_window()
        self.logwin = ShowLogWindow.ShowLogWindow(prompt)
        self.logwin.show_log_window()

    def batch_send(self):
        indexs = self.treeView.selectedIndexes()
        path = ''
        j = 0
        for i in indexs:
            if (j == 1):
                id = str(self.treeView.model().itemData(i)[0])
            if (j == 2):
                changekey = str(self.treeView.model().itemData(i)[0])
            if (j == 3):
                path = str(self.treeView.model().itemData(i)[0])
            j += 1
        if (path == ''):
            QMessageBox(QMessageBox.Critical, '操作错误', '请先选择一个目录！').exec()
            return
        waitwindow = ShowWaitWindow.ShowWaitWindow('批量转发中，请稍候...')
        waitwindow.show_wait_window()
        batchsend = BatchSend.BatchSend(path, self.token_handler)
        prompt = batchsend.batch_forward()
        waitwindow.close_wait_window()
        self.logwin = ShowLogWindow.ShowLogWindow(prompt)
        self.logwin.show_log_window()